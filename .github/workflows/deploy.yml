name: Deploy

on:
  workflow_run:
    workflows: ['Docker Build and Push']
    types:
      - completed
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:run

      - name: Build application
        run: echo "Build step - customize based on your deployment needs"

      - name: Get package version
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to production
        run: |
          echo "Deploying version ${{ steps.package-version.outputs.version }}"
          echo "Docker image: ghcr.io/${{ github.repository_owner }}/node-typescript-template:${{ steps.package-version.outputs.version }}"

          # Pull the Docker image that was built
          docker pull ghcr.io/${{ github.repository_owner }}/node-typescript-template:${{ steps.package-version.outputs.version }}

          # Example deployment commands - customize based on your platform:
          # 
          # For Kubernetes:
          # kubectl set image deployment/app-deployment app=ghcr.io/${{ github.repository_owner }}/node-typescript-template:${{ steps.package-version.outputs.version }}
          # 
          # For Docker Swarm:
          # docker service update --image ghcr.io/${{ github.repository_owner }}/node-typescript-template:${{ steps.package-version.outputs.version }} app-service
          # 
          # For AWS ECS:
          # aws ecs update-service --cluster my-cluster --service my-service --force-new-deployment
          # 
          # For Google Cloud Run:
          # gcloud run deploy my-service --image ghcr.io/${{ github.repository_owner }}/node-typescript-template:${{ steps.package-version.outputs.version }}
          # 
          # For Azure Container Instances:
          # az container create --resource-group my-rg --name my-container --image ghcr.io/${{ github.repository_owner }}/node-typescript-template:${{ steps.package-version.outputs.version }}

          echo "Deployment completed successfully!"
